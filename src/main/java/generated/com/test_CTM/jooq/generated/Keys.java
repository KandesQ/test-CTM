/*
 * This file is generated by jOOQ.
 */
package com.test_CTM.jooq.generated;


import com.test_CTM.jooq.generated.tables.Carriers;
import com.test_CTM.jooq.generated.tables.Databasechangeloglock;
import com.test_CTM.jooq.generated.tables.Routes;
import com.test_CTM.jooq.generated.tables.Tickets;
import com.test_CTM.jooq.generated.tables.Users;
import com.test_CTM.jooq.generated.tables.records.CarriersRecord;
import com.test_CTM.jooq.generated.tables.records.DatabasechangeloglockRecord;
import com.test_CTM.jooq.generated.tables.records.RoutesRecord;
import com.test_CTM.jooq.generated.tables.records.TicketsRecord;
import com.test_CTM.jooq.generated.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CarriersRecord> CARRIERS_PKEY = Internal.createUniqueKey(Carriers.CARRIERS, DSL.name("carriers_pkey"), new TableField[] { Carriers.CARRIERS.ID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<RoutesRecord> ROUTES_PKEY = Internal.createUniqueKey(Routes.ROUTES, DSL.name("routes_pkey"), new TableField[] { Routes.ROUTES.ID }, true);
    public static final UniqueKey<TicketsRecord> TICKETS_PKEY = Internal.createUniqueKey(Tickets.TICKETS, DSL.name("tickets_pkey"), new TableField[] { Tickets.TICKETS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_LOGIN_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_login_key"), new TableField[] { Users.USERS.LOGIN }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<TicketsRecord, CarriersRecord> TICKETS__TICKETS_CARRIER_ID_FKEY = Internal.createForeignKey(Tickets.TICKETS, DSL.name("tickets_carrier_id_fkey"), new TableField[] { Tickets.TICKETS.CARRIER_ID }, Keys.CARRIERS_PKEY, new TableField[] { Carriers.CARRIERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TicketsRecord, RoutesRecord> TICKETS__TICKETS_ROUTE_ID_FKEY = Internal.createForeignKey(Tickets.TICKETS, DSL.name("tickets_route_id_fkey"), new TableField[] { Tickets.TICKETS.ROUTE_ID }, Keys.ROUTES_PKEY, new TableField[] { Routes.ROUTES.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TicketsRecord, UsersRecord> TICKETS__TICKETS_USER_ID_FKEY = Internal.createForeignKey(Tickets.TICKETS, DSL.name("tickets_user_id_fkey"), new TableField[] { Tickets.TICKETS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true, ForeignKeyRule.SET_NULL, ForeignKeyRule.NO_ACTION);
}
