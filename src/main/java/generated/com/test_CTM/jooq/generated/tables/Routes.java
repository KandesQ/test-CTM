/*
 * This file is generated by jOOQ.
 */
package com.test_CTM.jooq.generated.tables;


import com.test_CTM.jooq.generated.Keys;
import com.test_CTM.jooq.generated.Public;
import com.test_CTM.jooq.generated.tables.Tickets.TicketsPath;
import com.test_CTM.jooq.generated.tables.records.RoutesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Routes extends TableImpl<RoutesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.routes</code>
     */
    public static final Routes ROUTES = new Routes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoutesRecord> getRecordType() {
        return RoutesRecord.class;
    }

    /**
     * The column <code>public.routes.id</code>.
     */
    public final TableField<RoutesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.routes.from</code>.
     */
    public final TableField<RoutesRecord, String> FROM = createField(DSL.name("from"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.routes.to</code>.
     */
    public final TableField<RoutesRecord, String> TO = createField(DSL.name("to"), SQLDataType.VARCHAR(100), this, "");

    private Routes(Name alias, Table<RoutesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Routes(Name alias, Table<RoutesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.routes</code> table reference
     */
    public Routes(String alias) {
        this(DSL.name(alias), ROUTES);
    }

    /**
     * Create an aliased <code>public.routes</code> table reference
     */
    public Routes(Name alias) {
        this(alias, ROUTES);
    }

    /**
     * Create a <code>public.routes</code> table reference
     */
    public Routes() {
        this(DSL.name("routes"), null);
    }

    public <O extends Record> Routes(Table<O> path, ForeignKey<O, RoutesRecord> childPath, InverseForeignKey<O, RoutesRecord> parentPath) {
        super(path, childPath, parentPath, ROUTES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RoutesPath extends Routes implements Path<RoutesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RoutesPath(Table<O> path, ForeignKey<O, RoutesRecord> childPath, InverseForeignKey<O, RoutesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RoutesPath(Name alias, Table<RoutesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RoutesPath as(String alias) {
            return new RoutesPath(DSL.name(alias), this);
        }

        @Override
        public RoutesPath as(Name alias) {
            return new RoutesPath(alias, this);
        }

        @Override
        public RoutesPath as(Table<?> alias) {
            return new RoutesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RoutesRecord, Integer> getIdentity() {
        return (Identity<RoutesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RoutesRecord> getPrimaryKey() {
        return Keys.ROUTES_PKEY;
    }

    private transient TicketsPath _tickets;

    /**
     * Get the implicit to-many join path to the <code>public.tickets</code>
     * table
     */
    public TicketsPath tickets() {
        if (_tickets == null)
            _tickets = new TicketsPath(this, null, Keys.TICKETS__TICKETS_ROUTE_ID_FKEY.getInverseKey());

        return _tickets;
    }

    @Override
    public Routes as(String alias) {
        return new Routes(DSL.name(alias), this);
    }

    @Override
    public Routes as(Name alias) {
        return new Routes(alias, this);
    }

    @Override
    public Routes as(Table<?> alias) {
        return new Routes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Routes rename(String name) {
        return new Routes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Routes rename(Name name) {
        return new Routes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Routes rename(Table<?> name) {
        return new Routes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Routes where(Condition condition) {
        return new Routes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Routes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Routes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Routes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Routes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Routes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Routes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Routes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Routes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Routes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
