/*
 * This file is generated by jOOQ.
 */
package com.test_CTM.jooq.generated.tables;


import com.test_CTM.jooq.generated.Keys;
import com.test_CTM.jooq.generated.Public;
import com.test_CTM.jooq.generated.tables.Carriers.CarriersPath;
import com.test_CTM.jooq.generated.tables.Routes.RoutesPath;
import com.test_CTM.jooq.generated.tables.Users.UsersPath;
import com.test_CTM.jooq.generated.tables.records.TicketsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tickets extends TableImpl<TicketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tickets</code>
     */
    public static final Tickets TICKETS = new Tickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketsRecord> getRecordType() {
        return TicketsRecord.class;
    }

    /**
     * The column <code>public.tickets.id</code>.
     */
    public final TableField<TicketsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.tickets.user_id</code>.
     */
    public final TableField<TicketsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tickets.carrier_id</code>.
     */
    public final TableField<TicketsRecord, Integer> CARRIER_ID = createField(DSL.name("carrier_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tickets.route_id</code>.
     */
    public final TableField<TicketsRecord, Integer> ROUTE_ID = createField(DSL.name("route_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tickets.departure_at</code>.
     */
    public final TableField<TicketsRecord, LocalDateTime> DEPARTURE_AT = createField(DSL.name("departure_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.tickets.arrive_at</code>.
     */
    public final TableField<TicketsRecord, LocalDateTime> ARRIVE_AT = createField(DSL.name("arrive_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.tickets.seat_number</code>.
     */
    public final TableField<TicketsRecord, Integer> SEAT_NUMBER = createField(DSL.name("seat_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.tickets.price</code>.
     */
    public final TableField<TicketsRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(7, 2).nullable(false), this, "");

    private Tickets(Name alias, Table<TicketsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.tickets</code> table reference
     */
    public Tickets(String alias) {
        this(DSL.name(alias), TICKETS);
    }

    /**
     * Create an aliased <code>public.tickets</code> table reference
     */
    public Tickets(Name alias) {
        this(alias, TICKETS);
    }

    /**
     * Create a <code>public.tickets</code> table reference
     */
    public Tickets() {
        this(DSL.name("tickets"), null);
    }

    public <O extends Record> Tickets(Table<O> path, ForeignKey<O, TicketsRecord> childPath, InverseForeignKey<O, TicketsRecord> parentPath) {
        super(path, childPath, parentPath, TICKETS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TicketsPath extends Tickets implements Path<TicketsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TicketsPath(Table<O> path, ForeignKey<O, TicketsRecord> childPath, InverseForeignKey<O, TicketsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TicketsPath(Name alias, Table<TicketsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TicketsPath as(String alias) {
            return new TicketsPath(DSL.name(alias), this);
        }

        @Override
        public TicketsPath as(Name alias) {
            return new TicketsPath(alias, this);
        }

        @Override
        public TicketsPath as(Table<?> alias) {
            return new TicketsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TicketsRecord, Integer> getIdentity() {
        return (Identity<TicketsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TicketsRecord> getPrimaryKey() {
        return Keys.TICKETS_PKEY;
    }

    @Override
    public List<ForeignKey<TicketsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TICKETS__TICKETS_CARRIER_ID_FKEY, Keys.TICKETS__TICKETS_ROUTE_ID_FKEY, Keys.TICKETS__TICKETS_USER_ID_FKEY);
    }

    private transient CarriersPath _carriers;

    /**
     * Get the implicit join path to the <code>public.carriers</code> table.
     */
    public CarriersPath carriers() {
        if (_carriers == null)
            _carriers = new CarriersPath(this, Keys.TICKETS__TICKETS_CARRIER_ID_FKEY, null);

        return _carriers;
    }

    private transient RoutesPath _routes;

    /**
     * Get the implicit join path to the <code>public.routes</code> table.
     */
    public RoutesPath routes() {
        if (_routes == null)
            _routes = new RoutesPath(this, Keys.TICKETS__TICKETS_ROUTE_ID_FKEY, null);

        return _routes;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.TICKETS__TICKETS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public Tickets as(String alias) {
        return new Tickets(DSL.name(alias), this);
    }

    @Override
    public Tickets as(Name alias) {
        return new Tickets(alias, this);
    }

    @Override
    public Tickets as(Table<?> alias) {
        return new Tickets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(String name) {
        return new Tickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Name name) {
        return new Tickets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Table<?> name) {
        return new Tickets(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tickets where(Condition condition) {
        return new Tickets(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tickets where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tickets where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tickets where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tickets where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tickets where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tickets where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tickets where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tickets whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tickets whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
